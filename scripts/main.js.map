{"version":3,"sources":["main.js"],"names":["Providers","resultsList","document","getElementById","noResultsMessage","querySelector","init","async","fetch","then","response","json","data","JSON","parse","d","fetchData","providers","forEach","provider","ProviderID","DepartmentID","ProviderName","DepartmentName","WaitTime","result","waitTime","range","min","max","getWaitTime","parseInt","appendChild","createRange","createContextualFragment","hidden","setAttribute","populate","filter","currentValue","dataset","populated","resultItems","querySelectorAll","checkIfHideAll","Array","from","length","textContent","toUpperCase","indexOf","onanimationend","removeAttribute","createElement"],"mappings":"AAAA,aAAA,MAAAA,UAAA,WAEA,MAAAC,EAAAC,SAAAC,eAAA,oBAEAC,EAAAF,SAAAG,cAAA,uBAgJA,MAAA,CACAC,KA/IAC,uBAWAA,iBACA,aAAAC,MAAA,oIACAC,MAAAC,GAAAA,EAAAC,SACAF,MAAAG,GACAC,KAAAC,MAAAF,EAAAG,KAbAC,GAAAP,MAAAG,KAoBA,SAAAK,GACAA,EAAAC,SAAAC,IAEA,MAAAC,WAAAA,EAAAC,aAAAA,EAAAC,aAAAA,EAAAC,eAAAA,EAAAC,SAAAA,GAAAL,EAGAM,EAAA,2DACAL,0BAAAC,iIAIAC,MAAAC,2DA0BA,SAAAG,GACA,IAAAD,EAuBA,MApBA,CACA,CAAA,EAAA,IACA,CAAA,GAAA,IACA,CAAA,GAAA,IACA,CAAA,GAAA,KAGAP,SAAAS,IACA,MAAAC,EAAAC,GAAAF,EAIAD,GAAAE,GAAAF,GAAAG,EACAJ,EAAA,cAAAG,KAAAC,YACAH,EAAAG,IAEAJ,EAAA,wIAIAA,EAjDAK,CAAAC,SAAAP,+NAYAvB,EAAA+B,YAAA9B,SAAA+B,cAAAC,yBAAAT,IAGArB,EAAA+B,QAAA,KAIAlC,EAAAmC,aAAA,kBAAA,GAjDAC,CAAAzB,OA4IA0B,OA1DA,SAAAC,GAEA,IAAAtC,EAAAuC,QAAAC,UAAA,OAGA,MAAAC,EAAAxC,SAAAyC,iBAAA,oBAiCA,SAAAC,IAQA,IANAC,MAAAC,KAAAJ,GAAAJ,QAAAb,IACA,IAAAA,EAAAU,SAKAY,OACA3C,EAAA+B,QAAA,EAEA/B,EAAA+B,QAAA,EA1CAO,EAAAxB,SAAAO,IAGAA,EAAApB,cAAA,0BAAA2C,YAEAC,cAAAC,QAAAX,EAAAU,gBAAA,GACAxB,EAAA0B,eAAA,KACA1B,EAAA2B,gBAAA,mBACA3B,EAAAU,QAAA,GAEA,mBAAAjC,SAAAmD,cAAA,QAEA5B,EAAAW,aAAA,kBAAA,UAGAX,EAAA0B,eAAA,KACA1B,EAAAU,QAAA,EACAV,EAAA2B,gBAAA,mBAIAR,OAGAnB,EAAAU,QAAA,EACAV,EAAA2B,gBAAA,mBACAR,QAoBAA,MAjJA,GA0JA5C,UAAAM","file":"main.js","sourcesContent":["const Providers = (function() {\n  // Get results unordered list.\n  const resultsList = document.getElementById(\"provider-results\");\n  // Get \"no results\" message.\n  const noResultsMessage = document.querySelector(\".no-results-message\");\n\n  async function init() {\n    // Get provider data.\n    const providers = await fetchData().then((data) => {\n      // Populate based on the returned data.\n      populate(data);\n    });\n  }\n\n  /**\n   * Fetches provider data.\n   */\n  async function fetchData() {\n    return await fetch(\"https://tch-bus-dev-waittimes-aps-01.tch-bus-dev-ase-01.p.azurewebsites.net/PublicServices/GetWaitTimes.svc/AllProviderWaitTimes\")\n      .then(response => response.json())\n      .then(data => {\n        return JSON.parse(data.d);\n      });\n  }\n\n  /**\n   * Populates empty unordered list with list items containing provider data.\n   */\n  function populate(providers) {\n    providers.forEach((provider) => {\n      // Destructure provider properties.\n      const { ProviderID, DepartmentID, ProviderName, DepartmentName, WaitTime } = provider;\n\n      // Create list item to populate.\n      const result = `\n        <li class=\"provider-result\" data-provider-id=\"${ProviderID}\" data-department-id=\"${DepartmentID}\">\n          <div class=\"boxed-width\">\n            <div>\n              <p class=\"provider-result__name\">\n                ${ProviderName} (${DepartmentName}):\n                <br><span style=\"font-weight: 400\">${getWaitTime(parseInt(WaitTime))}</span>\n              </p>\n            </div>\n\n            <div class=\"provider-result__icon\">\n              <img src=\"images/icons/check.svg\" alt=\"\"> \n            </div>\n          </div>\n        </li>\n      `;\n\n      // Convert result string to fragment and append to results ul.\n      resultsList.appendChild(document.createRange().createContextualFragment(result));\n\n      // Hide no results message.\n      noResultsMessage.hidden = true;\n    });\n\n    // Add hook indicating data has been successfully populated.\n    resultsList.setAttribute(\"data-populated\", true);\n  }\n\n  /**\n   * Gets the range associated with the given wait time.\n   */\n  function getWaitTime(waitTime) {\n    let result;\n\n    // Define ranges.\n    const ranges = [\n      [0, 15],\n      [16, 30],\n      [31, 45],\n      [46, 60],\n    ];\n\n    ranges.forEach((range) => {\n      const [min, max] = range;\n\n      // Check if given wait time is between minimum and maximum range\n      // (destructured above).\n      if(waitTime >= min && waitTime <= max) {\n        result = `Wait Time: ${min}â€“${max} Minutes`;\n      } else if(waitTime > max) {\n        // Return error message if the wait time exceeds all maximums.\n        result = \"Your wait time is currently unavailable. Please visit the front desk if you are interested in learning more about your wait time.\";\n      }\n    });\n\n    return result;\n  }\n  \n  function filter(currentValue) {\n    // Exit if no data has been populated.\n    if(!resultsList.dataset.populated) return;\n\n    // Get result li.\n    const resultItems = document.querySelectorAll(\".provider-result\");\n\n    resultItems.forEach((result) => {\n      // If the inner text of the result li matches the search term value (case\n      // insensitive), unhide the result. Otherwise, hide it.\n      const resultName = result.querySelector(\".provider-result__name\").textContent;\n\n      if(resultName.toUpperCase().indexOf(currentValue.toUpperCase()) > -1) {\n        result.onanimationend = null;\n        result.removeAttribute(\"data-transition\");\n        result.hidden = false;\n      } else {\n        if(\"onanimationend\" in document.createElement(\"div\")) {\n          // Add a hook for attaching a CSS animation.\n          result.setAttribute(\"data-transition\", \"hiding\");\n\n          // Once that animation finishes, hide the result and remove the hook.\n          result.onanimationend = () => {\n            result.hidden = true;\n            result.removeAttribute(\"data-transition\");\n\n            // Check if all results are hidden and show a no results message if\n            // so.\n            checkIfHideAll();\n          };\n        } else {\n          result.hidden = true;\n          result.removeAttribute(\"data-transition\");\n          checkIfHideAll();\n        }\n      }\n    });\n\n    function checkIfHideAll() {\n      // Create an array out of provider results that are not hidden.\n      const remainingResults = Array.from(resultItems).filter((result) => {\n        return result.hidden === false;\n      });\n\n      // If that array is empty, show the no results message. Otherwise, hide\n      // it.\n      if(remainingResults.length === 0) {\n        noResultsMessage.hidden = false;\n      } else {\n        noResultsMessage.hidden = true;\n      }\n    }\n\n    checkIfHideAll();\n  }\n\n  return {\n    init: init,\n    filter: filter,\n  };\n}());\n\nProviders.init();"]}